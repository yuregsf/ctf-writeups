const axios = require('axios');\nconst express = require('express');\nconst swaggerJsdoc = require('swagger-jsdoc');\nconst swaggerUi = require('swagger-ui-express');\nconst cors = require('cors');\n\nconst app = express();\napp.use(express.json());\n\napp.use(cors({\n  origin: '*',\n  methods: ['GET', 'POST', 'OPTIONS'], \n}));\n\nconst localhostOnly = (req, res, next) => {\n  const ip = req.connection.remoteAddress;\n\n  if (ip === '::1' || ip === '127.0.0.1') {\n    next();\n  } else {\n    res.status(403).json({ error: 'Access denied' });\n  }\n};\n\nconst swaggerOptionsV1 = {\n  swaggerDefinition: {\n    openapi: '3.0.0',\n    info: {\n      title: 'API Documentation v1',\n      version: '1.0.0',\n      description: 'Automatically generated Swagger documentation for version 1',\n    },\n    servers: [{ url: 'http://127.0.0.1:3000' }],\n  },\n  apis: ['/app/node_app/swagger.js'],\n};\n\nconst swaggerOptionsV2 = {\n  swaggerDefinition: {\n    openapi: '3.0.0',\n    info: {\n      title: 'API Documentation v2',\n      version: '2.0.0',\n      description: 'Automatically generated Swagger documentation for version 2',\n    },\n    servers: [{ url: 'http://127.0.0.1:3000' }],\n  },\n  apis: ['/app/node_app/swagger2.js'],\n};\n\nconst swaggerDocsV1 = swaggerJsdoc(swaggerOptionsV1);\nconst swaggerDocsV2 = swaggerJsdoc(swaggerOptionsV2);\n\nconst swaggerUiOptions = {\n  explorer: true,\n  swaggerOptions: {\n    urls: [\n      { url: '/api-docs/v1/swagger.json', name: 'API v1' },\n      { url: '/api-docs/v2/swagger.json', name: 'API v2' },\n    ],\n  },\n};\n\napp.get('/api-docs/v1/swagger.json', (req, res) => res.json(swaggerDocsV1));\napp.get('/api-docs/v2/swagger.json', (req, res) => res.json(swaggerDocsV2));\n\napp.get('/', (req, res) => res.redirect('/api-docs'));\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(null, swaggerUiOptions));\n\napp.post('/api/v1/try_request', async (req, res) => {\n  try {\n    const response = await axios(req.body);\n    res.json(response.data);\n  } catch (error) {\n    res.status(500).json({ error: error });\n  }\n});\n\napp.get('/api/v2/get_readme', localhostOnly, (req, res) => {\n  res.status(200).json({\n    \"README.txt\": \"A API v2 estÃ¡ em desenvolvimento. Use /dev/shm/v2.sock por enquanto (nao tem todas as funcionalidades ainda).\",\n  });\n});\n\napp.listen(3000, '0.0.0.0', () => console.log('Server started on port 3000'));\n
